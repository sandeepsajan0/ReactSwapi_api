{"version":3,"sources":["ShowData.js","Data.js","FirstData.js","App.js","serviceWorker.js","index.js"],"names":["ShowData","react_default","a","createElement","className","this","props","keys","details","React","Component","ProvideData","_this","data","Object","map","item","src_ShowData","key","FetchData","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","posts","loading","prevPage","nextPage","filterKey","pageNo","console","log","getData","bind","assertThisInitialized","handleNext","handlePrev","nextProps","_this3","setState","fetch","then","results","json","previous","next","replace","prev","_this4","test","key1","Data_ProvideData","onClick","disabled","FirstData","App","filter","handleSubmit","e","preventDefault","newFilter","refs","value","window","history","pushState","style","textAlign","textTransform","onSubmit","ref","type","name","Data","src_FirstData","Boolean","location","hostname","match","routing","BrowserRouter","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAceA,mLARb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACLH,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,KAAf,KAAJ,IAA+BF,KAAKC,MAAME,QAA1C,aANUC,IAAMC,WCEvBC,mLACM,IAAAC,EAAAP,KACEQ,EAAOC,OAAOP,KAAKF,KAAKC,MAAME,SAASO,IAAI,SAACC,GAAD,OACzCf,EAAAC,EAAAC,cAACc,EAAD,CAAUC,IAAKF,EAAMT,KAAMS,EAAMR,QAASI,EAAKN,MAAME,QAAQQ,OACrE,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdS,UANaJ,IAAMC,WA0FjBS,cA3Ed,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAT,KAAAc,IAClBC,EAAAN,OAAAQ,EAAA,EAAAR,CAAAT,KAAAS,OAAAS,EAAA,EAAAT,CAAAK,GAAAK,KAAAnB,KAAMC,KACDmB,MAAQ,CACVC,MAAO,GACPC,SAAS,EACTC,SAAS,GACTC,SAAS,GACTC,UAAUxB,EAAMwB,UAChBC,OAAO,IAERC,QAAQC,IAAI,SAASb,EAAKK,MAAMK,WAClCV,EAAKc,QAAUd,EAAKc,QAAQC,KAAbrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAM,KACfA,EAAKiB,WAAWjB,EAAKiB,WAAWF,KAAhBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAM,KAChBA,EAAKkB,WAAWlB,EAAKkB,WAAWH,KAAhBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAM,KAbEA,mFAiBlBY,QAAQC,IAAI,SACZ5B,KAAK6B,QAAQ7B,KAAKoB,MAAMK,6DAGCS,GACrBA,EAAUT,YAAczB,KAAKoB,MAAMK,YACtCE,QAAQC,IAAI,SAAS5B,KAAKoB,MAAMK,UAAUS,EAAUT,WACpDzB,KAAK6B,QAAQK,EAAUT,4CAIjBxB,GAAM,IAAAkC,EAAAnC,KACb2B,QAAQC,IAAI,SACZ5B,KAAKoC,SAAS,CAACd,SAAS,IACxBe,MAAM,wBAAwBpC,GAAOqC,KAAK,SAAAC,GACzC,OAAOA,EAAQC,SACbF,KAAK,SAAA9B,GACP2B,EAAKC,SAAS,CACbd,SAAS,EACTD,MAAMb,EAAK+B,QACXd,UAAUxB,EACVsB,SAASf,EAAKiC,SACdjB,SAAShB,EAAKkC,8CAQhB,IAAIA,EAAO1C,KAAKoB,MAAMI,SAASmB,QAAQ,wBAAwB,IAC/D3C,KAAK6B,QAAQa,GACbf,QAAQC,IAAIc,wCAGZ,IAAIE,EAAO5C,KAAKoB,MAAMG,SAASoB,QAAQ,wBAAwB,IAC/D3C,KAAK6B,QAAQe,GACbjB,QAAQC,IAAIgB,oCAIL,IAAAC,EAAA7C,KACP2B,QAAQC,IAAI,OAAO5B,KAAKoB,MAAMK,WAC9B,IAAMqB,EAAO9C,KAAKoB,MAAME,QAAU,aAAeb,OAAOP,KAAKF,KAAKoB,MAAMC,OAAOX,IAAI,SAACqC,GAAD,OACjFnD,EAAAC,EAAAC,cAACkD,EAAD,CAAanC,IAAKkC,EAAM7C,KAAM6C,EAAM5C,QAAS0C,EAAKzB,MAAMC,MAAM0B,OAEhE,OADApB,QAAQC,IAAI,cAEXhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACb+C,EACDlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdC,KAAKoB,MAAMG,SAAW3B,EAAAC,EAAAC,cAAA,UAAQmD,QAASjD,KAAKiC,YAAtB,QAAkDrC,EAAAC,EAAAC,cAAA,UAAQoD,UAAQ,GAAhB,QACxElD,KAAKoB,MAAMI,SAAW5B,EAAAC,EAAAC,cAAA,UAAQmD,QAASjD,KAAKgC,YAAtB,QAAkDpC,EAAAC,EAAAC,cAAA,UAAQoD,UAAQ,GAAhB,iBAtErD9C,IAAMC,WCmBf8C,qBA9Bb,SAAAA,IAAa,IAAA5C,EAAA,OAAAE,OAAAO,EAAA,EAAAP,CAAAT,KAAAmD,IACX5C,EAAAE,OAAAQ,EAAA,EAAAR,CAAAT,KAAAS,OAAAS,EAAA,EAAAT,CAAA0C,GAAAhC,KAAAnB,QACKoB,MAAM,CACTC,MAAM,GACNC,SAAQ,GAJCf,mFAOM,IAAAQ,EAAAf,KACjBA,KAAKoC,SAAS,CAACd,SAAS,IACxBe,MAAM,yBAAyBC,KAAK,SAAAC,GAC5B,OAAOA,EAAQC,SAChBF,KAAK,SAAA9B,GACNO,EAAKqB,SAAS,CACZf,MAAMb,EACNc,SAAQ,uCAKV,IAAAa,EAAAnC,KACA8C,EAAO9C,KAAKoB,MAAME,QAAU,aAAeb,OAAOP,KAAKF,KAAKoB,MAAMC,OAAOX,IAAI,SAACqC,GAAD,OAC/EnD,EAAAC,EAAAC,cAACc,EAAD,CAAUC,IAAKkC,EAAM7C,KAAM6C,EAAM5C,QAASgC,EAAKf,MAAMC,MAAM0B,OAC/D,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZ+C,UA1Be1C,IAAMC,YC+Cf+C,cA5Cb,SAAAA,IAAa,IAAA7C,EAAA,OAAAE,OAAAO,EAAA,EAAAP,CAAAT,KAAAoD,IACX7C,EAAAE,OAAAQ,EAAA,EAAAR,CAAAT,KAAAS,OAAAS,EAAA,EAAAT,CAAA2C,GAAAjC,KAAAnB,QACKoB,MAAQ,CACXiC,OAAO,IAGT9C,EAAK+C,aAAa/C,EAAK+C,aAAaxB,KAAlBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAF,KANPA,4EAWAgD,GACVA,EAAEC,iBACH,IAAIC,EAAYzD,KAAK0D,KAAL,OAAoBC,MACpChC,QAAQC,IAAI6B,GACZzD,KAAKoC,SAAS,CACZiB,OAASI,IAEXG,OAAOC,QAAQC,UAAU,KAAM,KAAML,oCASrC,OADA9B,QAAQC,IAAI5B,KAAKoB,MAAMiC,QAEfzD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,MAAIiE,MARK,CACjBC,UAAW,SACXC,cAAe,eAMmBjE,KAAKoB,MAAMiC,QACrCzD,EAAAC,EAAAC,cAAA,QAAMoE,SAAUlE,KAAKsD,cACrB1D,EAAAC,EAAAC,cAAA,SAAOqE,IAAI,SAASpE,UAAU,SAASqE,KAAK,OAAOC,KAAK,WACxDzE,EAAAC,EAAAC,cAAA,SAAOsE,KAAK,SAAST,MAAM,aAG1B3D,KAAKoB,MAAMiC,OAASzD,EAAAC,EAAAC,cAACwE,EAAD,CAAW7C,UAAWzB,KAAKoB,MAAMiC,SAAYzD,EAAAC,EAAAC,cAACyE,EAAD,cAtC9DlE,6BCOEmE,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCVN,IAAMC,EACFhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACAjF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,MAKrC8B,IAASC,OAAOP,EAASQ,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.435f4bb6.chunk.js","sourcesContent":["import React from \"react\"\n\nclass ShowData extends React.Component{\n\t\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"post-item\">\n            \t<p> <b>{this.props.keys}:</b> {this.props.details} </p>\n            </div>\n\t\t\t)\n\t}\n}\n\nexport default ShowData","import React from \"react\"\nimport ShowData from \"./ShowData\"\n\n\nclass ProvideData extends React.Component{\n    render(){\n        const data = Object.keys(this.props.details).map((item) => \n                <ShowData key={item} keys={item} details={this.props.details[item]} /> )\n        return(\n            <div className=\"post-preitem\">\n            {data}\n            </div>\n            )\n    }\n}\n\n\nclass FetchData extends React.Component{\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t   posts: [],\n\t\t   loading: false,\n\t\t   prevPage:\"\",\n\t\t   nextPage:\"\",\n\t\t   filterKey:props.filterKey,\n\t\t   pageNo:\"\",\n\t   }\n\t   console.log(\"constr\",this.state.filterKey)\n\t\tthis.getData = this.getData.bind(this)\n\t\tthis.handleNext=this.handleNext.bind(this)\n\t\tthis.handlePrev=this.handlePrev.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"mount\")\n\t\tthis.getData(this.state.filterKey)\n\t}\n\n\tcomponentWillReceiveProps(nextProps){\n\t\tif (nextProps.filterKey !== this.state.filterKey){\n\t\t\tconsole.log(\"recive\",this.state.filterKey,nextProps.filterKey)\n\t\t\tthis.getData(nextProps.filterKey)\n\t\t}\n\t}\n\n\tgetData(props){\n\t\tconsole.log(\"fetch\")\n\t\tthis.setState({loading: true})\n\t\tfetch('https://swapi.co/api/'+props).then(results => {\n\t\t\treturn results.json()\n\t\t}).then(data => {\n\t\t\tthis.setState({\n\t\t\t\tloading: false,\n\t\t\t\tposts:data.results,\n\t\t\t\tfilterKey:props,\n\t\t\t\tprevPage:data.previous,\n\t\t\t\tnextPage:data.next,\n\t\t\t})\n\t\t\t}\n\n\t\t\t)\n\t}\n\n\thandleNext(){\n\t\tlet next = this.state.nextPage.replace('https://swapi.co/api/','')\n\t\tthis.getData(next)\n\t\tconsole.log(next)\n\t}\n\thandlePrev(){\n\t\tlet prev = this.state.prevPage.replace('https://swapi.co/api/','')\n\t\tthis.getData(prev)\n\t\tconsole.log(prev)\n\t}\n\n\n\trender(){\n\t\tconsole.log(\"data\",this.state.filterKey)\n\t\tconst test = this.state.loading ? \"loading...\" : Object.keys(this.state.posts).map((key1) => (  \n\t\t\t\t<ProvideData key={key1} keys={key1} details={this.state.posts[key1]} /> ))\n\t\tconsole.log(\"after test\")\n\t\treturn (\n\t\t\t<div className=\"post-list\">\n\t\t\t\t{test}\n\t\t\t\t<div className=\"button-center\">\n\t\t\t\t{this.state.prevPage ? <button onClick={this.handlePrev}>prev</button> : <button disabled>prev</button>}\n\t\t\t\t{this.state.nextPage ? <button onClick={this.handleNext}>next</button> : <button disabled>next</button>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FetchData","import React from \"react\"\nimport ShowData from \"./ShowData\"\n\n\nclass FirstData extends React.Component{\n\n  constructor(){\n    super()\n    this.state={\n      posts:[],\n      loading:false\n    }\n  }\n  componentDidMount(){\n    this.setState({loading: true})\n    fetch('https://swapi.co/api/').then(results => {\n            return results.json()\n        }).then(data => {\n          this.setState({\n            posts:data,\n            loading:false\n            })  \n        })\n  }\n\n  render(){\n    const test = this.state.loading ? \"loading...\" : Object.keys(this.state.posts).map((key1) => (  \n        <ShowData key={key1} keys={key1} details={this.state.posts[key1]} /> ))\n    return(\n      <div className=\"post-list\">\n        {test}\n      </div>\n      )\n  }\n}\n\nexport default FirstData","import React, { Component } from 'react';\nimport FetchData from \"./Data\"\nimport './App.css';\nimport FirstData from \"./FirstData\"\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      filter:\"\"\n    }\n    \n    this.handleSubmit=this.handleSubmit.bind(this)\n  }\n\n\n\n  handleSubmit(e){\n     e.preventDefault();\n    let newFilter = this.refs[\"filter\"].value\n    console.log(newFilter)\n    this.setState({\n      filter : newFilter\n    })\n    window.history.pushState(null, null, newFilter);\n  }\n\n  render() {\n    const headingStyle={\n      textAlign: \"center\",\n      textTransform: \"capitalize\"\n    };\n    console.log(this.state.filter)\n    return (\n            <div>\n              <div className=\"filter-item\">\n              <h2 style={headingStyle}>{this.state.filter}</h2>\n              <form onSubmit={this.handleSubmit}>\n              <input ref=\"filter\" className=\"filter\" type=\"text\" name=\"filter\"/>\n              <input type=\"submit\" value=\"Search\"/>\n              </form>\n              </div>\n              {this.state.filter ? <FetchData filterKey={this.state.filter}/> : <FirstData />}\n              \n            </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Route, NavLink, BrowserRouter as Router,Switch } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst routing = (\n    <Router>\n    <div>\n    <Route exact path=\"/\" component={App}  />\n    </div>\n    </Router>\n    )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}